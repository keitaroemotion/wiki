#!/usr/bin/env python

#
# This scypt is for enabling managing the private/public
# markdown wiki repository.
#
#
# author: Kei Sugano <tobasojyo@gmail.com>
#

from subprocess import call
import glob
import os
import re
import sys

ARTICLE_LOCATION = "/usr/local/etc/wiki/articles"

def read_article(file):
    f     = open(file)
    lines = f.readlines()
    f.close()
    return lines

def edit_article(file):
    call(["vim", file + ".md"])

def args_to_article_name():
    return "_".join(sys.argv[1:])

def args_to_keyword_regex():
    regex = ".+".join(sys.argv[1:])
    print("regex: {}".format(regex))
    return re.compile(regex)

def match(text, regex):
    return regex.match(text) != None

def get_files(dir, fs = []):
    for d in glob.glob("{}/*".format(dir)):
        os.path.isfile(d) and fs.append(d) or get_files(fs, d)
    return fs

def matched_files(regex, root_dir):
    return filter(lambda f: match(f, regex) == True, get_files(root_dir))

def int_input(input):
    return match(input, re.compile("[0-9]+")) and int(input) - 1 or 0

def links(file):
    return [l.rstrip().replace("https://", "") for l in read_article(file)
                                                     if match(l, re.compile("https:\/\/"))]

def open_link(file):
    print("")
    counter = 0
    _links = links(file)
    for l in _links:
        counter += 1
        print("[{}] {}".format(counter, l))
    if len(_links) == 0:
        print("\nthere are no links\n")
    else:
        rinput = raw_input("> ")
        if rinput == "q":
            sys.exit()
        input  = int_input(rinput)
        print(_links[input])
        call(["open", "https://" + _links[input]])

regex = args_to_keyword_regex()
files = matched_files(regex, ARTICLE_LOCATION)

def dispatch(files, article_name):
    #
    # display files
    #
    counter = 0
    for file in files:
        counter += 1
        print("[{}] {}".format(counter, os.path.basename(file)))

    #
    # menu:
    #
    input = raw_input("[n: make article '{}', u: launch s: save l: links q:quit] > "
                .format(article_name))

    if input == "n":
        edit_article("{}/{}".format(ARTICLE_LOCATION, article_name)) 
    elif input == "q":
        sys.exit()
    elif input == "":
        print("")
        dispatch(files, article_name)
    elif input == "s":
        os.system(
            "cd {}; git init; git add .; git commit".format(ARTICLE_LOCATION)
        )
    elif match(input, re.compile("^l+$")):
        open_link(files[0])
    elif input == "u":
        #
        # This part has to enable launching website article
        #
        print("")
    elif int_input(input) + 1 > len(files):   
        print("\nindex size out of range\n"); sys.exit()
    else:
        edit_article(files[int_input(input)])
    dispatch(files, article_name)

article_name = args_to_article_name()

if len(files) == 0:
    files_selected = filter(lambda f: match(os.path.basename(f),
                            re.compile(article_name)), get_files(ARTICLE_LOCATION))
    files_selected = list(set(files_selected))
    if len(files_selected) == 0:
        edit_article("{}/{}".format(ARTICLE_LOCATION, article_name)) 
    else:
        dispatch(files_selected, article_name)

elif len(files) == 1:
    edit_article(files[0]) 
else:
    dispatch(files, article_name)
